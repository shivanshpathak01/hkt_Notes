Concepts Taught by Harkirat singh from his cohort :

Q. How websites/webApps deployed ?
-> 1. Frontend :Frontend is deployed through CDNs (as there are many pop{point of presence} in the world so they get our data when we deploy them), But in the case of videos, they do not get deployed like every pop will get that video content, they just get the copy of the first CDN that requested the video, else it will take a lot of time to get the content delivered  
-> 2. Backend : while in backend there is no concept of getting the copy of the data, bcz of the authentication, else everybody gets the same username and password and that will create problem 
Q. When we upload videos on yt, why it takes so much time to upload ?
-> It takes time in transcoding 
# Backend needs to talk to backends Why?
-> Ex1 : When we sign up and the backend needs to verify that the email with which you are signing up is your email, it sends a verification link to our email automatically , that happens in the backend 
-> Ex2 : when we upload a video, it gets transcoded, there is queue where we have to maintain the things which i have to transcode next, 

-> websockets is made by using HTTP and that was the wrong decision they took who made web sockets 
-> Whenever you need to post the chat and it goes to server and then from there it go to client we use web sockets
        (developer(Provider) --> server -->clients(Users) )

-> LIMIT: This is used to specify the maximum number of records you want to retrieve from the database. For instance, if you have a huge dataset but only need the first 10 records, you would use LIMIT 10.
-> OFFSET: This is used in conjunction with LIMIT to specify the starting point within the dataset. For example, if you want to skip the first 20 records and then retrieve the next 10, you would use LIMIT 10 OFFSET 20.
-> We use zod to maintain the schema in the javascript and typescript 
-> Why we should not use enums ? what are the problems with enums=> basically when we connect frontend with backend it cause problem
# basically ==> Client-Server Sync Issues: Enums can lead to issues where the client and server are not in sync, causing bugs that can be hard to diagnose. Ensuring that both sides are always updated together can be challenging.

# Monorepo (Monolithic Repository)
-> A monorepo (short for monolithic repository) is a single repository that contains multiple projects or services, instead of having separate repositories for each.
# Key Characteristics of a Monorepo:
Single Repository: All projects and packages are in one Git repository.
Shared Codebase: Multiple teams or projects can reuse code easily.
Centralized Versioning: Everything is versioned together, avoiding compatibility issues.
Consistent CI/CD: Easier to maintain builds, testing, and deployments in one place.

#Turborepo
->Turborepo is a high-performance build system for JavaScript and TypeScript monorepos. It optimizes and speeds up the development workflow by providing:
--> Remote Caching: Saves build outputs so that repeated builds can reuse previous results.
--> Task Scheduling: Runs tasks efficiently in parallel or sequentially based on dependencies.
--> Workspaces Management: Helps manage multiple packages (like microservices or libraries) within a single repository.
--> Incremental Builds: Rebuilds only what has changed instead of the entire project.

# Monolith
A monolith (or monolithic architecture) refers to a single, unified application where all components—UI, business logic, and database—are tightly integrated and deployed as a single unit.

--> Characteristics of a Monolithic Architecture:
--> Single codebase for the entire application.
--> Tightly coupled components (front-end, back-end, and database are in the same system).
--> Shared database across all features.
--> Simple deployment as everything is packaged together.

# Monolith vs. Microservices
--> Monolith: Everything is in one codebase and deployed as one unit.
--> Microservices: The application is broken into independent services that communicate via APIs.
1:55:22