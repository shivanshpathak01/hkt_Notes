-> "localhost:3000" here localhost is the domain name, google.com, google is domain name
-> IPV4 Address => 132.22.22.239  ==> each chunk before . only go from 0 to 255, it can only be of 8 bits
-> IPV4 Address => 1320151.22.22.239  ==> not a IPV4 Address
-> IPV4 are very limited, as 256^4 are the numbers of IPV4 Addresses, that's why IPV6 came into picture, and a normal small company can't own them, we have to borrow or take it form cloud service providers
-> There is some concept of the intranet, in which there is range set, in which you have the access to the network through a specific IP, but when you are outside that range, the same IP is been given to some other domain
-> Also in intranet, when multiple people are connected to the same router, they all would be able to view the localhost that someone is using on their network
-> The above thing can be achieved by doing both, either by localhost, or by getting the IP of your router and going on that IP 
-> To get the IP Address of router that is connected : go to cmd -> ipconfig/all
-> after getting the ip, you can open the running server on any of the device that is connected to the same network
-> Always do npx serve to get the localhost as well as IP of the running port 
-> VM(Virtual Machine) : There is Hardware-> hypervisor -> VMs 
-> according to need we can optimize this as they are virtual, so cost friendly
-> Hypervisor (can be both either software or Hardware) divides the resources needed by VMs, according to their usecase
-> Maximum thing can be deployed on this virtual Machine but whenever you need something that have some extra throughput like : bitcoin mining type thing where you need excessive throughput, there only bare metal comes into picture
-> Bare Metal Servers : in a bare metal setup, OS runs directly on the physical hardware without a hypervisor in between, there is no virtualization layer
-> they are fixed and can't be virtualized, also can't be accessed easily, they can't be found easily 
-> ex: latitude.sh

-> SSH Protocol( password based Auth): protocol that allows secure communication b/w two systems, typically for remote administration.
-> when we validate a password we get shell access to that machine, this is called SSH
-> cloud Provider : AWS,GCP,Azure       EasyOne:Civo,DigitalOcean,vultr
-> Every Cloud provider will have their own name for their VMs like : AWS-> EC2(Elastic Compute 2nd generation), DigitalOcean-> droplets
-> So by signining up, and paying them , we get a public IP.
-> And the thing is that we get a ubuntu machine running my tasks that i will add, on the server of teh service provider, and i will be able to host my website or do anything on that server that they have provided to me 
-> We can clone git repo there and do whatever thing we are doing on our local machine 
-> we can give the url [239.25.1.21:3000], which includes ip and the port number where you are running your task

Keypair Based-Authentication : 
-> In an org, if we do the work using the passwords, then we can't find the person who can do the wrong things
-> To tackle that we use ssh keys, through these too we can get what we want but in a different manner

Port 80 and 443 :
-> Port 80 is of the HTTP and 443 is of the HTTPS
-> Port 22 is the default port for SSH (Secure Shell) connections 


SSH into the server:
-> command ==> ~ssh -i filename.pem ubuntu@ip
-> It is giving us the code 0644 and saying that the permissions are too open, so what is this 0644(in decimal), This is actually RWE (Read, Write, Execute) access where if we convert the code to binary, it gives us (110,010,010) RWE access 
-> command : chmod 700 kirat-class.pem (Here 700 is in decimal)
-> Now The owner have all the access but others don't have any as there is 7(111) 0(000) 0(000), so now this file is protected, earlier it had the access to some other peoples as well 

How to deploy apps to the AWS/EC2 :
-> Firstly you have to create an instance of the EC2 and then configure it correctly, then you will get an ip of the virtual machine or instance that you have created.
-> On that ip you just have to hit the with the port number you have provided in your server(usually express server).
-> Also in ubuntu, git is already installed but you have to install node to run the server and then if you check with the ip you have got from the instance of the EC2(obviously with port number), you will see the that your application is running fine.

Nginx (Nginx reverse proxy): 
-> like if we use vpn, the request goes from user to some server and then to the blocked website from that server
-> And in Reverse Proxy it sends the request to the server and then it will send to some website according to the request made
-> It is not exactly the reverse of each other, just a mediatre like nginx involve
Reverse Proxy : A reverse proxy is a server that sits between client devices and web servers, forwarding client requests to the appropriate backend server. Here are the main aspects of a reverse proxy:

# Acts as an intermediary between clients and servers
# Receives requests from clients and forwards them to backend servers
# Returns the server's response back to the client.

Popular Reverse Proxy Solutions:
# Nginx
# Apache HTTP Server (mod_proxy)
# HAProxy
# Traefik
# Cloudflare

3:54:06